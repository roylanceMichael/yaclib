package org.roylance.yaclib.core.services.java.server

import org.roylance.common.service.IBuilder
import org.roylance.yaclib.YaclibModel
import org.roylance.yaclib.core.enums.CommonTokens
import org.roylance.yaclib.core.utilities.FileExtensionUtilities
import org.roylance.yaclib.core.utilities.JavaUtilities

class JettyMainBuilder(private val projectInformation: YaclibModel.ProjectInformation): IBuilder<YaclibModel.File> {
    private val InitialTemplate = """${CommonTokens.AutoGeneratedAlteringOkay}
package ${projectInformation.mainDependency.group};

import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.servlet.DefaultServlet;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.servlet.ServletHolder;
import org.glassfish.jersey.servlet.ServletContainer;

import java.io.File;

public class Main {
    public static void main(final String[] args) throws Exception {
        // handle migrations when we start
        final Server server = new Server(${buildPort()});

        String fileLocation = "webapp";
        if (!new File(fileLocation).exists()) {
            fileLocation = "src/main/webapp";
        }

        final ServletContextHandler context = new ServletContextHandler(ServletContextHandler.NO_SESSIONS);
        context.setContextPath("/");
        server.setHandler(context);

        final ServletHolder jerseyServlet = context.addServlet(ServletContainer.class, "/rest/*");
        jerseyServlet.setInitOrder(1);
        jerseyServlet.setInitParameter("jersey.config.server.provider.packages","${projectInformation.mainDependency.group}");

        final ServletHolder staticServlet = context.addServlet(DefaultServlet.class,"/*");
        staticServlet.setInitParameter("resourceBase",fileLocation);
        staticServlet.setInitParameter("pathInfoOnly","true");

        try
        {
            server.start();
            server.join();
        }
        catch (Throwable t)
        {
            t.printStackTrace(System.err);
        }
    }
}
"""

    override fun build(): YaclibModel.File {
        val returnFile = YaclibModel.File.newBuilder()
                .setFileToWrite(InitialTemplate)
                .setFileName("Main")
                .setFileExtension(YaclibModel.FileExtension.JAVA_EXT)
                .setFileUpdateType(YaclibModel.FileUpdateType.WRITE_IF_NOT_EXISTS)
                .setFullDirectoryLocation("src/main/java/" + JavaUtilities.convertGroupNameToFolders(projectInformation.mainDependency.group))

        return returnFile.build()
    }

    private fun buildPort(): String {
        if (projectInformation.mainDependency.serverPort == 0) {
            return "8080"
        }
        return projectInformation.mainDependency.serverPort.toString()
    }
}
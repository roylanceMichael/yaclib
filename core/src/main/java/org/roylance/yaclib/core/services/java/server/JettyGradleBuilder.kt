package org.roylance.yaclib.core.services.java.server

import org.roylance.common.service.IBuilder
import org.roylance.yaclib.YaclibModel
import org.roylance.yaclib.core.enums.CommonTokens
import org.roylance.yaclib.core.utilities.GradleUtilities
import org.roylance.yaclib.core.utilities.JavaUtilities

class JettyGradleBuilder(
    private val projectInformation: YaclibModel.ProjectInformation) : IBuilder<YaclibModel.File> {
  private val InitialTemplate = """${CommonTokens.AutoGeneratedAlteringOkay}
import org.roylance.yaclib.YaclibPackageTask;

buildscript {
    ext.kotlin_version = "$${JavaUtilities.KotlinName}"
    repositories {
        jcenter()
        mavenCentral()
        maven { url '${JavaUtilities.DefaultRepository}'}
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$${JavaUtilities.KotlinName}"
        classpath "org.roylance:yaclib.core:$${JavaUtilities.YaclibVersionName}"
    }
}

group "$${JavaUtilities.GroupName}"
version "$${JavaUtilities.MajorName}.$${JavaUtilities.MinorName}"

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'

sourceCompatibility = 1.8
mainClassName="${projectInformation.mainDependency.group}.Main"

repositories {
    mavenCentral()
    maven { url '${JavaUtilities.DefaultRepository}'}
    ${GradleUtilities.buildRepository(projectInformation.mainDependency.mavenRepository)}
}

sourceSets {
    main {
      java.srcDirs = ['src/main/java',
                      '../${projectInformation.mainDependency.name}/src/main/java',
                      '../${projectInformation.mainDependency.name}client/src/main/java']
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '${YaclibStatics.JUnitVersion}'

    compile "org.eclipse.jetty:jetty-server:$${JavaUtilities.JettyServerName}"
    compile "org.eclipse.jetty:jetty-servlet:$${JavaUtilities.JettyServerName}"
    compile "org.eclipse.jetty:jetty-webapp:$${JavaUtilities.JettyServerName}"

    compile "org.glassfish.jersey.core:jersey-server:$${JavaUtilities.JerseyMediaName}"
    compile "org.glassfish.jersey.containers:jersey-container-servlet-core:$${JavaUtilities.JerseyMediaName}"
    compile "org.glassfish.jersey.containers:jersey-container-servlet:$${JavaUtilities.JerseyMediaName}"
    compile "org.glassfish.jersey.media:jersey-media-multipart:$${JavaUtilities.JerseyMediaName}"

    compile "org.apache.httpcomponents:httpclient:$${JavaUtilities.HttpComponentsName}"
    compile "com.squareup.retrofit2:retrofit:${'$'}${JavaUtilities.RetrofitName}"

    compile "org.roylance:roylance.common:${'$'}${'{'}YaclibStatics.RoylanceCommonVersion${'}'}"

${buildDependencies()}
}

task packageApp(type: YaclibPackageTask) {
    appName = rootProject.name
    serverVersion = "$${JavaUtilities.MajorName}.$${JavaUtilities.MinorName}"
    maintainerInfo = "${projectInformation.mainDependency.authorName}"
    serverPort = "$${JavaUtilities.ServerPortName}".toInteger()
}

packageApp.dependsOn(installDist)
"""

  override fun build(): YaclibModel.File {
    val returnFile = YaclibModel.File.newBuilder()
        .setFileToWrite(InitialTemplate.trim())
        .setFileExtension(YaclibModel.FileExtension.GRADLE_EXT)
        .setFileName("build")
        .setFullDirectoryLocation("")
        .setFileUpdateType(YaclibModel.FileUpdateType.WRITE_IF_NOT_EXISTS)
        .build()

    return returnFile
  }

  private fun buildDependencies(): String {
    val workspace = StringBuilder()

    projectInformation.thirdPartyDependenciesList
        .filter { it.type == YaclibModel.DependencyType.JAVA }
        .forEach { dependency ->
          workspace.append(
              """    compile "${dependency.group}:${dependency.name}:$${JavaUtilities.buildPackageVariableName(
                  dependency)}"
""")
        }

    // todo: verify we don't need this
//    projectInformation.controllers.controllerDependenciesList.forEach { controllerDependency ->
//      workspace.append(
//          """    compile "${controllerDependency.dependency.group}:${controllerDependency.dependency.name}${CommonTokens.ClientSuffix}:$${JavaUtilities.buildPackageVariableName(
//              controllerDependency.dependency)}"
//""")
//    }

    return workspace.toString()
  }
}
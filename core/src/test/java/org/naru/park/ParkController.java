// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: park_controller.proto

package org.naru.park;

public final class ParkController {
  private ParkController() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface CommonActionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.naru.park.CommonAction)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.org.naru.park.UIParkRequest request = 1;</code>
     */
    boolean hasRequest();
    /**
     * <code>.org.naru.park.UIParkRequest request = 1;</code>
     */
    org.naru.park.ParkModel.UIParkRequest getRequest();
    /**
     * <code>.org.naru.park.UIParkRequest request = 1;</code>
     */
    org.naru.park.ParkModel.UIParkRequestOrBuilder getRequestOrBuilder();

    /**
     * <code>.org.naru.park.UIParkResponse response = 2;</code>
     */
    boolean hasResponse();
    /**
     * <code>.org.naru.park.UIParkResponse response = 2;</code>
     */
    org.naru.park.ParkModel.UIParkResponse getResponse();
    /**
     * <code>.org.naru.park.UIParkResponse response = 2;</code>
     */
    org.naru.park.ParkModel.UIParkResponseOrBuilder getResponseOrBuilder();
  }
  /**
   * Protobuf type {@code org.naru.park.CommonAction}
   */
  public  static final class CommonAction extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.naru.park.CommonAction)
      CommonActionOrBuilder {
    // Use CommonAction.newBuilder() to construct.
    private CommonAction(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CommonAction() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private CommonAction(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.naru.park.ParkModel.UIParkRequest.Builder subBuilder = null;
              if (request_ != null) {
                subBuilder = request_.toBuilder();
              }
              request_ = input.readMessage(org.naru.park.ParkModel.UIParkRequest.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(request_);
                request_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              org.naru.park.ParkModel.UIParkResponse.Builder subBuilder = null;
              if (response_ != null) {
                subBuilder = response_.toBuilder();
              }
              response_ = input.readMessage(org.naru.park.ParkModel.UIParkResponse.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(response_);
                response_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.naru.park.ParkController.internal_static_org_naru_park_CommonAction_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.naru.park.ParkController.internal_static_org_naru_park_CommonAction_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.naru.park.ParkController.CommonAction.class, org.naru.park.ParkController.CommonAction.Builder.class);
    }

    public static final int REQUEST_FIELD_NUMBER = 1;
    private org.naru.park.ParkModel.UIParkRequest request_;
    /**
     * <code>.org.naru.park.UIParkRequest request = 1;</code>
     */
    public boolean hasRequest() {
      return request_ != null;
    }
    /**
     * <code>.org.naru.park.UIParkRequest request = 1;</code>
     */
    public org.naru.park.ParkModel.UIParkRequest getRequest() {
      return request_ == null ? org.naru.park.ParkModel.UIParkRequest.getDefaultInstance() : request_;
    }
    /**
     * <code>.org.naru.park.UIParkRequest request = 1;</code>
     */
    public org.naru.park.ParkModel.UIParkRequestOrBuilder getRequestOrBuilder() {
      return getRequest();
    }

    public static final int RESPONSE_FIELD_NUMBER = 2;
    private org.naru.park.ParkModel.UIParkResponse response_;
    /**
     * <code>.org.naru.park.UIParkResponse response = 2;</code>
     */
    public boolean hasResponse() {
      return response_ != null;
    }
    /**
     * <code>.org.naru.park.UIParkResponse response = 2;</code>
     */
    public org.naru.park.ParkModel.UIParkResponse getResponse() {
      return response_ == null ? org.naru.park.ParkModel.UIParkResponse.getDefaultInstance() : response_;
    }
    /**
     * <code>.org.naru.park.UIParkResponse response = 2;</code>
     */
    public org.naru.park.ParkModel.UIParkResponseOrBuilder getResponseOrBuilder() {
      return getResponse();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (request_ != null) {
        output.writeMessage(1, getRequest());
      }
      if (response_ != null) {
        output.writeMessage(2, getResponse());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (request_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getRequest());
      }
      if (response_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getResponse());
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.naru.park.ParkController.CommonAction)) {
        return super.equals(obj);
      }
      org.naru.park.ParkController.CommonAction other = (org.naru.park.ParkController.CommonAction) obj;

      boolean result = true;
      result = result && (hasRequest() == other.hasRequest());
      if (hasRequest()) {
        result = result && getRequest()
            .equals(other.getRequest());
      }
      result = result && (hasResponse() == other.hasResponse());
      if (hasResponse()) {
        result = result && getResponse()
            .equals(other.getResponse());
      }
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasRequest()) {
        hash = (37 * hash) + REQUEST_FIELD_NUMBER;
        hash = (53 * hash) + getRequest().hashCode();
      }
      if (hasResponse()) {
        hash = (37 * hash) + RESPONSE_FIELD_NUMBER;
        hash = (53 * hash) + getResponse().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.naru.park.ParkController.CommonAction parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.naru.park.ParkController.CommonAction parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.naru.park.ParkController.CommonAction parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.naru.park.ParkController.CommonAction parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.naru.park.ParkController.CommonAction parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.naru.park.ParkController.CommonAction parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.naru.park.ParkController.CommonAction parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.naru.park.ParkController.CommonAction parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.naru.park.ParkController.CommonAction parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.naru.park.ParkController.CommonAction parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.naru.park.ParkController.CommonAction prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.naru.park.CommonAction}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.naru.park.CommonAction)
        org.naru.park.ParkController.CommonActionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.naru.park.ParkController.internal_static_org_naru_park_CommonAction_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.naru.park.ParkController.internal_static_org_naru_park_CommonAction_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.naru.park.ParkController.CommonAction.class, org.naru.park.ParkController.CommonAction.Builder.class);
      }

      // Construct using org.naru.park.ParkController.CommonAction.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (requestBuilder_ == null) {
          request_ = null;
        } else {
          request_ = null;
          requestBuilder_ = null;
        }
        if (responseBuilder_ == null) {
          response_ = null;
        } else {
          response_ = null;
          responseBuilder_ = null;
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.naru.park.ParkController.internal_static_org_naru_park_CommonAction_descriptor;
      }

      public org.naru.park.ParkController.CommonAction getDefaultInstanceForType() {
        return org.naru.park.ParkController.CommonAction.getDefaultInstance();
      }

      public org.naru.park.ParkController.CommonAction build() {
        org.naru.park.ParkController.CommonAction result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.naru.park.ParkController.CommonAction buildPartial() {
        org.naru.park.ParkController.CommonAction result = new org.naru.park.ParkController.CommonAction(this);
        if (requestBuilder_ == null) {
          result.request_ = request_;
        } else {
          result.request_ = requestBuilder_.build();
        }
        if (responseBuilder_ == null) {
          result.response_ = response_;
        } else {
          result.response_ = responseBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.naru.park.ParkController.CommonAction) {
          return mergeFrom((org.naru.park.ParkController.CommonAction)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.naru.park.ParkController.CommonAction other) {
        if (other == org.naru.park.ParkController.CommonAction.getDefaultInstance()) return this;
        if (other.hasRequest()) {
          mergeRequest(other.getRequest());
        }
        if (other.hasResponse()) {
          mergeResponse(other.getResponse());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.naru.park.ParkController.CommonAction parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.naru.park.ParkController.CommonAction) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private org.naru.park.ParkModel.UIParkRequest request_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.naru.park.ParkModel.UIParkRequest, org.naru.park.ParkModel.UIParkRequest.Builder, org.naru.park.ParkModel.UIParkRequestOrBuilder> requestBuilder_;
      /**
       * <code>.org.naru.park.UIParkRequest request = 1;</code>
       */
      public boolean hasRequest() {
        return requestBuilder_ != null || request_ != null;
      }
      /**
       * <code>.org.naru.park.UIParkRequest request = 1;</code>
       */
      public org.naru.park.ParkModel.UIParkRequest getRequest() {
        if (requestBuilder_ == null) {
          return request_ == null ? org.naru.park.ParkModel.UIParkRequest.getDefaultInstance() : request_;
        } else {
          return requestBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.naru.park.UIParkRequest request = 1;</code>
       */
      public Builder setRequest(org.naru.park.ParkModel.UIParkRequest value) {
        if (requestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          request_ = value;
          onChanged();
        } else {
          requestBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.naru.park.UIParkRequest request = 1;</code>
       */
      public Builder setRequest(
          org.naru.park.ParkModel.UIParkRequest.Builder builderForValue) {
        if (requestBuilder_ == null) {
          request_ = builderForValue.build();
          onChanged();
        } else {
          requestBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.naru.park.UIParkRequest request = 1;</code>
       */
      public Builder mergeRequest(org.naru.park.ParkModel.UIParkRequest value) {
        if (requestBuilder_ == null) {
          if (request_ != null) {
            request_ =
              org.naru.park.ParkModel.UIParkRequest.newBuilder(request_).mergeFrom(value).buildPartial();
          } else {
            request_ = value;
          }
          onChanged();
        } else {
          requestBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.naru.park.UIParkRequest request = 1;</code>
       */
      public Builder clearRequest() {
        if (requestBuilder_ == null) {
          request_ = null;
          onChanged();
        } else {
          request_ = null;
          requestBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.naru.park.UIParkRequest request = 1;</code>
       */
      public org.naru.park.ParkModel.UIParkRequest.Builder getRequestBuilder() {
        
        onChanged();
        return getRequestFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.naru.park.UIParkRequest request = 1;</code>
       */
      public org.naru.park.ParkModel.UIParkRequestOrBuilder getRequestOrBuilder() {
        if (requestBuilder_ != null) {
          return requestBuilder_.getMessageOrBuilder();
        } else {
          return request_ == null ?
              org.naru.park.ParkModel.UIParkRequest.getDefaultInstance() : request_;
        }
      }
      /**
       * <code>.org.naru.park.UIParkRequest request = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.naru.park.ParkModel.UIParkRequest, org.naru.park.ParkModel.UIParkRequest.Builder, org.naru.park.ParkModel.UIParkRequestOrBuilder> 
          getRequestFieldBuilder() {
        if (requestBuilder_ == null) {
          requestBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.naru.park.ParkModel.UIParkRequest, org.naru.park.ParkModel.UIParkRequest.Builder, org.naru.park.ParkModel.UIParkRequestOrBuilder>(
                  getRequest(),
                  getParentForChildren(),
                  isClean());
          request_ = null;
        }
        return requestBuilder_;
      }

      private org.naru.park.ParkModel.UIParkResponse response_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.naru.park.ParkModel.UIParkResponse, org.naru.park.ParkModel.UIParkResponse.Builder, org.naru.park.ParkModel.UIParkResponseOrBuilder> responseBuilder_;
      /**
       * <code>.org.naru.park.UIParkResponse response = 2;</code>
       */
      public boolean hasResponse() {
        return responseBuilder_ != null || response_ != null;
      }
      /**
       * <code>.org.naru.park.UIParkResponse response = 2;</code>
       */
      public org.naru.park.ParkModel.UIParkResponse getResponse() {
        if (responseBuilder_ == null) {
          return response_ == null ? org.naru.park.ParkModel.UIParkResponse.getDefaultInstance() : response_;
        } else {
          return responseBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.naru.park.UIParkResponse response = 2;</code>
       */
      public Builder setResponse(org.naru.park.ParkModel.UIParkResponse value) {
        if (responseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          response_ = value;
          onChanged();
        } else {
          responseBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.naru.park.UIParkResponse response = 2;</code>
       */
      public Builder setResponse(
          org.naru.park.ParkModel.UIParkResponse.Builder builderForValue) {
        if (responseBuilder_ == null) {
          response_ = builderForValue.build();
          onChanged();
        } else {
          responseBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.naru.park.UIParkResponse response = 2;</code>
       */
      public Builder mergeResponse(org.naru.park.ParkModel.UIParkResponse value) {
        if (responseBuilder_ == null) {
          if (response_ != null) {
            response_ =
              org.naru.park.ParkModel.UIParkResponse.newBuilder(response_).mergeFrom(value).buildPartial();
          } else {
            response_ = value;
          }
          onChanged();
        } else {
          responseBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.naru.park.UIParkResponse response = 2;</code>
       */
      public Builder clearResponse() {
        if (responseBuilder_ == null) {
          response_ = null;
          onChanged();
        } else {
          response_ = null;
          responseBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.naru.park.UIParkResponse response = 2;</code>
       */
      public org.naru.park.ParkModel.UIParkResponse.Builder getResponseBuilder() {
        
        onChanged();
        return getResponseFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.naru.park.UIParkResponse response = 2;</code>
       */
      public org.naru.park.ParkModel.UIParkResponseOrBuilder getResponseOrBuilder() {
        if (responseBuilder_ != null) {
          return responseBuilder_.getMessageOrBuilder();
        } else {
          return response_ == null ?
              org.naru.park.ParkModel.UIParkResponse.getDefaultInstance() : response_;
        }
      }
      /**
       * <code>.org.naru.park.UIParkResponse response = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.naru.park.ParkModel.UIParkResponse, org.naru.park.ParkModel.UIParkResponse.Builder, org.naru.park.ParkModel.UIParkResponseOrBuilder> 
          getResponseFieldBuilder() {
        if (responseBuilder_ == null) {
          responseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.naru.park.ParkModel.UIParkResponse, org.naru.park.ParkModel.UIParkResponse.Builder, org.naru.park.ParkModel.UIParkResponseOrBuilder>(
                  getResponse(),
                  getParentForChildren(),
                  isClean());
          response_ = null;
        }
        return responseBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:org.naru.park.CommonAction)
    }

    // @@protoc_insertion_point(class_scope:org.naru.park.CommonAction)
    private static final org.naru.park.ParkController.CommonAction DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.naru.park.ParkController.CommonAction();
    }

    public static org.naru.park.ParkController.CommonAction getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CommonAction>
        PARSER = new com.google.protobuf.AbstractParser<CommonAction>() {
      public CommonAction parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new CommonAction(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CommonAction> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CommonAction> getParserForType() {
      return PARSER;
    }

    public org.naru.park.ParkController.CommonAction getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SensorControllerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.naru.park.SensorController)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.org.naru.park.CommonAction send_reading = 1;</code>
     */
    boolean hasSendReading();
    /**
     * <code>.org.naru.park.CommonAction send_reading = 1;</code>
     */
    org.naru.park.ParkController.CommonAction getSendReading();
    /**
     * <code>.org.naru.park.CommonAction send_reading = 1;</code>
     */
    org.naru.park.ParkController.CommonActionOrBuilder getSendReadingOrBuilder();

    /**
     * <code>.org.naru.park.CommonAction all = 2;</code>
     */
    boolean hasAll();
    /**
     * <code>.org.naru.park.CommonAction all = 2;</code>
     */
    org.naru.park.ParkController.CommonAction getAll();
    /**
     * <code>.org.naru.park.CommonAction all = 2;</code>
     */
    org.naru.park.ParkController.CommonActionOrBuilder getAllOrBuilder();

    /**
     * <code>.org.naru.park.CommonAction save_sensor = 3;</code>
     */
    boolean hasSaveSensor();
    /**
     * <code>.org.naru.park.CommonAction save_sensor = 3;</code>
     */
    org.naru.park.ParkController.CommonAction getSaveSensor();
    /**
     * <code>.org.naru.park.CommonAction save_sensor = 3;</code>
     */
    org.naru.park.ParkController.CommonActionOrBuilder getSaveSensorOrBuilder();

    /**
     * <code>.org.naru.park.CommonAction delete_sensor = 4;</code>
     */
    boolean hasDeleteSensor();
    /**
     * <code>.org.naru.park.CommonAction delete_sensor = 4;</code>
     */
    org.naru.park.ParkController.CommonAction getDeleteSensor();
    /**
     * <code>.org.naru.park.CommonAction delete_sensor = 4;</code>
     */
    org.naru.park.ParkController.CommonActionOrBuilder getDeleteSensorOrBuilder();

    /**
     * <code>.org.naru.park.CommonAction get_latest_reading = 5;</code>
     */
    boolean hasGetLatestReading();
    /**
     * <code>.org.naru.park.CommonAction get_latest_reading = 5;</code>
     */
    org.naru.park.ParkController.CommonAction getGetLatestReading();
    /**
     * <code>.org.naru.park.CommonAction get_latest_reading = 5;</code>
     */
    org.naru.park.ParkController.CommonActionOrBuilder getGetLatestReadingOrBuilder();

    /**
     * <code>.org.naru.park.CommonAction get_user_history = 6;</code>
     */
    boolean hasGetUserHistory();
    /**
     * <code>.org.naru.park.CommonAction get_user_history = 6;</code>
     */
    org.naru.park.ParkController.CommonAction getGetUserHistory();
    /**
     * <code>.org.naru.park.CommonAction get_user_history = 6;</code>
     */
    org.naru.park.ParkController.CommonActionOrBuilder getGetUserHistoryOrBuilder();

    /**
     * <code>.org.naru.park.CommonAction get_latest_sensor_reading_for_user = 7;</code>
     */
    boolean hasGetLatestSensorReadingForUser();
    /**
     * <code>.org.naru.park.CommonAction get_latest_sensor_reading_for_user = 7;</code>
     */
    org.naru.park.ParkController.CommonAction getGetLatestSensorReadingForUser();
    /**
     * <code>.org.naru.park.CommonAction get_latest_sensor_reading_for_user = 7;</code>
     */
    org.naru.park.ParkController.CommonActionOrBuilder getGetLatestSensorReadingForUserOrBuilder();
  }
  /**
   * Protobuf type {@code org.naru.park.SensorController}
   */
  public  static final class SensorController extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.naru.park.SensorController)
      SensorControllerOrBuilder {
    // Use SensorController.newBuilder() to construct.
    private SensorController(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SensorController() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private SensorController(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.naru.park.ParkController.CommonAction.Builder subBuilder = null;
              if (sendReading_ != null) {
                subBuilder = sendReading_.toBuilder();
              }
              sendReading_ = input.readMessage(org.naru.park.ParkController.CommonAction.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sendReading_);
                sendReading_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              org.naru.park.ParkController.CommonAction.Builder subBuilder = null;
              if (all_ != null) {
                subBuilder = all_.toBuilder();
              }
              all_ = input.readMessage(org.naru.park.ParkController.CommonAction.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(all_);
                all_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              org.naru.park.ParkController.CommonAction.Builder subBuilder = null;
              if (saveSensor_ != null) {
                subBuilder = saveSensor_.toBuilder();
              }
              saveSensor_ = input.readMessage(org.naru.park.ParkController.CommonAction.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(saveSensor_);
                saveSensor_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              org.naru.park.ParkController.CommonAction.Builder subBuilder = null;
              if (deleteSensor_ != null) {
                subBuilder = deleteSensor_.toBuilder();
              }
              deleteSensor_ = input.readMessage(org.naru.park.ParkController.CommonAction.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(deleteSensor_);
                deleteSensor_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              org.naru.park.ParkController.CommonAction.Builder subBuilder = null;
              if (getLatestReading_ != null) {
                subBuilder = getLatestReading_.toBuilder();
              }
              getLatestReading_ = input.readMessage(org.naru.park.ParkController.CommonAction.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(getLatestReading_);
                getLatestReading_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              org.naru.park.ParkController.CommonAction.Builder subBuilder = null;
              if (getUserHistory_ != null) {
                subBuilder = getUserHistory_.toBuilder();
              }
              getUserHistory_ = input.readMessage(org.naru.park.ParkController.CommonAction.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(getUserHistory_);
                getUserHistory_ = subBuilder.buildPartial();
              }

              break;
            }
            case 58: {
              org.naru.park.ParkController.CommonAction.Builder subBuilder = null;
              if (getLatestSensorReadingForUser_ != null) {
                subBuilder = getLatestSensorReadingForUser_.toBuilder();
              }
              getLatestSensorReadingForUser_ = input.readMessage(org.naru.park.ParkController.CommonAction.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(getLatestSensorReadingForUser_);
                getLatestSensorReadingForUser_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.naru.park.ParkController.internal_static_org_naru_park_SensorController_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.naru.park.ParkController.internal_static_org_naru_park_SensorController_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.naru.park.ParkController.SensorController.class, org.naru.park.ParkController.SensorController.Builder.class);
    }

    public static final int SEND_READING_FIELD_NUMBER = 1;
    private org.naru.park.ParkController.CommonAction sendReading_;
    /**
     * <code>.org.naru.park.CommonAction send_reading = 1;</code>
     */
    public boolean hasSendReading() {
      return sendReading_ != null;
    }
    /**
     * <code>.org.naru.park.CommonAction send_reading = 1;</code>
     */
    public org.naru.park.ParkController.CommonAction getSendReading() {
      return sendReading_ == null ? org.naru.park.ParkController.CommonAction.getDefaultInstance() : sendReading_;
    }
    /**
     * <code>.org.naru.park.CommonAction send_reading = 1;</code>
     */
    public org.naru.park.ParkController.CommonActionOrBuilder getSendReadingOrBuilder() {
      return getSendReading();
    }

    public static final int ALL_FIELD_NUMBER = 2;
    private org.naru.park.ParkController.CommonAction all_;
    /**
     * <code>.org.naru.park.CommonAction all = 2;</code>
     */
    public boolean hasAll() {
      return all_ != null;
    }
    /**
     * <code>.org.naru.park.CommonAction all = 2;</code>
     */
    public org.naru.park.ParkController.CommonAction getAll() {
      return all_ == null ? org.naru.park.ParkController.CommonAction.getDefaultInstance() : all_;
    }
    /**
     * <code>.org.naru.park.CommonAction all = 2;</code>
     */
    public org.naru.park.ParkController.CommonActionOrBuilder getAllOrBuilder() {
      return getAll();
    }

    public static final int SAVE_SENSOR_FIELD_NUMBER = 3;
    private org.naru.park.ParkController.CommonAction saveSensor_;
    /**
     * <code>.org.naru.park.CommonAction save_sensor = 3;</code>
     */
    public boolean hasSaveSensor() {
      return saveSensor_ != null;
    }
    /**
     * <code>.org.naru.park.CommonAction save_sensor = 3;</code>
     */
    public org.naru.park.ParkController.CommonAction getSaveSensor() {
      return saveSensor_ == null ? org.naru.park.ParkController.CommonAction.getDefaultInstance() : saveSensor_;
    }
    /**
     * <code>.org.naru.park.CommonAction save_sensor = 3;</code>
     */
    public org.naru.park.ParkController.CommonActionOrBuilder getSaveSensorOrBuilder() {
      return getSaveSensor();
    }

    public static final int DELETE_SENSOR_FIELD_NUMBER = 4;
    private org.naru.park.ParkController.CommonAction deleteSensor_;
    /**
     * <code>.org.naru.park.CommonAction delete_sensor = 4;</code>
     */
    public boolean hasDeleteSensor() {
      return deleteSensor_ != null;
    }
    /**
     * <code>.org.naru.park.CommonAction delete_sensor = 4;</code>
     */
    public org.naru.park.ParkController.CommonAction getDeleteSensor() {
      return deleteSensor_ == null ? org.naru.park.ParkController.CommonAction.getDefaultInstance() : deleteSensor_;
    }
    /**
     * <code>.org.naru.park.CommonAction delete_sensor = 4;</code>
     */
    public org.naru.park.ParkController.CommonActionOrBuilder getDeleteSensorOrBuilder() {
      return getDeleteSensor();
    }

    public static final int GET_LATEST_READING_FIELD_NUMBER = 5;
    private org.naru.park.ParkController.CommonAction getLatestReading_;
    /**
     * <code>.org.naru.park.CommonAction get_latest_reading = 5;</code>
     */
    public boolean hasGetLatestReading() {
      return getLatestReading_ != null;
    }
    /**
     * <code>.org.naru.park.CommonAction get_latest_reading = 5;</code>
     */
    public org.naru.park.ParkController.CommonAction getGetLatestReading() {
      return getLatestReading_ == null ? org.naru.park.ParkController.CommonAction.getDefaultInstance() : getLatestReading_;
    }
    /**
     * <code>.org.naru.park.CommonAction get_latest_reading = 5;</code>
     */
    public org.naru.park.ParkController.CommonActionOrBuilder getGetLatestReadingOrBuilder() {
      return getGetLatestReading();
    }

    public static final int GET_USER_HISTORY_FIELD_NUMBER = 6;
    private org.naru.park.ParkController.CommonAction getUserHistory_;
    /**
     * <code>.org.naru.park.CommonAction get_user_history = 6;</code>
     */
    public boolean hasGetUserHistory() {
      return getUserHistory_ != null;
    }
    /**
     * <code>.org.naru.park.CommonAction get_user_history = 6;</code>
     */
    public org.naru.park.ParkController.CommonAction getGetUserHistory() {
      return getUserHistory_ == null ? org.naru.park.ParkController.CommonAction.getDefaultInstance() : getUserHistory_;
    }
    /**
     * <code>.org.naru.park.CommonAction get_user_history = 6;</code>
     */
    public org.naru.park.ParkController.CommonActionOrBuilder getGetUserHistoryOrBuilder() {
      return getGetUserHistory();
    }

    public static final int GET_LATEST_SENSOR_READING_FOR_USER_FIELD_NUMBER = 7;
    private org.naru.park.ParkController.CommonAction getLatestSensorReadingForUser_;
    /**
     * <code>.org.naru.park.CommonAction get_latest_sensor_reading_for_user = 7;</code>
     */
    public boolean hasGetLatestSensorReadingForUser() {
      return getLatestSensorReadingForUser_ != null;
    }
    /**
     * <code>.org.naru.park.CommonAction get_latest_sensor_reading_for_user = 7;</code>
     */
    public org.naru.park.ParkController.CommonAction getGetLatestSensorReadingForUser() {
      return getLatestSensorReadingForUser_ == null ? org.naru.park.ParkController.CommonAction.getDefaultInstance() : getLatestSensorReadingForUser_;
    }
    /**
     * <code>.org.naru.park.CommonAction get_latest_sensor_reading_for_user = 7;</code>
     */
    public org.naru.park.ParkController.CommonActionOrBuilder getGetLatestSensorReadingForUserOrBuilder() {
      return getGetLatestSensorReadingForUser();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (sendReading_ != null) {
        output.writeMessage(1, getSendReading());
      }
      if (all_ != null) {
        output.writeMessage(2, getAll());
      }
      if (saveSensor_ != null) {
        output.writeMessage(3, getSaveSensor());
      }
      if (deleteSensor_ != null) {
        output.writeMessage(4, getDeleteSensor());
      }
      if (getLatestReading_ != null) {
        output.writeMessage(5, getGetLatestReading());
      }
      if (getUserHistory_ != null) {
        output.writeMessage(6, getGetUserHistory());
      }
      if (getLatestSensorReadingForUser_ != null) {
        output.writeMessage(7, getGetLatestSensorReadingForUser());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (sendReading_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getSendReading());
      }
      if (all_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getAll());
      }
      if (saveSensor_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getSaveSensor());
      }
      if (deleteSensor_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getDeleteSensor());
      }
      if (getLatestReading_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getGetLatestReading());
      }
      if (getUserHistory_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getGetUserHistory());
      }
      if (getLatestSensorReadingForUser_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getGetLatestSensorReadingForUser());
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.naru.park.ParkController.SensorController)) {
        return super.equals(obj);
      }
      org.naru.park.ParkController.SensorController other = (org.naru.park.ParkController.SensorController) obj;

      boolean result = true;
      result = result && (hasSendReading() == other.hasSendReading());
      if (hasSendReading()) {
        result = result && getSendReading()
            .equals(other.getSendReading());
      }
      result = result && (hasAll() == other.hasAll());
      if (hasAll()) {
        result = result && getAll()
            .equals(other.getAll());
      }
      result = result && (hasSaveSensor() == other.hasSaveSensor());
      if (hasSaveSensor()) {
        result = result && getSaveSensor()
            .equals(other.getSaveSensor());
      }
      result = result && (hasDeleteSensor() == other.hasDeleteSensor());
      if (hasDeleteSensor()) {
        result = result && getDeleteSensor()
            .equals(other.getDeleteSensor());
      }
      result = result && (hasGetLatestReading() == other.hasGetLatestReading());
      if (hasGetLatestReading()) {
        result = result && getGetLatestReading()
            .equals(other.getGetLatestReading());
      }
      result = result && (hasGetUserHistory() == other.hasGetUserHistory());
      if (hasGetUserHistory()) {
        result = result && getGetUserHistory()
            .equals(other.getGetUserHistory());
      }
      result = result && (hasGetLatestSensorReadingForUser() == other.hasGetLatestSensorReadingForUser());
      if (hasGetLatestSensorReadingForUser()) {
        result = result && getGetLatestSensorReadingForUser()
            .equals(other.getGetLatestSensorReadingForUser());
      }
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasSendReading()) {
        hash = (37 * hash) + SEND_READING_FIELD_NUMBER;
        hash = (53 * hash) + getSendReading().hashCode();
      }
      if (hasAll()) {
        hash = (37 * hash) + ALL_FIELD_NUMBER;
        hash = (53 * hash) + getAll().hashCode();
      }
      if (hasSaveSensor()) {
        hash = (37 * hash) + SAVE_SENSOR_FIELD_NUMBER;
        hash = (53 * hash) + getSaveSensor().hashCode();
      }
      if (hasDeleteSensor()) {
        hash = (37 * hash) + DELETE_SENSOR_FIELD_NUMBER;
        hash = (53 * hash) + getDeleteSensor().hashCode();
      }
      if (hasGetLatestReading()) {
        hash = (37 * hash) + GET_LATEST_READING_FIELD_NUMBER;
        hash = (53 * hash) + getGetLatestReading().hashCode();
      }
      if (hasGetUserHistory()) {
        hash = (37 * hash) + GET_USER_HISTORY_FIELD_NUMBER;
        hash = (53 * hash) + getGetUserHistory().hashCode();
      }
      if (hasGetLatestSensorReadingForUser()) {
        hash = (37 * hash) + GET_LATEST_SENSOR_READING_FOR_USER_FIELD_NUMBER;
        hash = (53 * hash) + getGetLatestSensorReadingForUser().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.naru.park.ParkController.SensorController parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.naru.park.ParkController.SensorController parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.naru.park.ParkController.SensorController parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.naru.park.ParkController.SensorController parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.naru.park.ParkController.SensorController parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.naru.park.ParkController.SensorController parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.naru.park.ParkController.SensorController parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.naru.park.ParkController.SensorController parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.naru.park.ParkController.SensorController parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.naru.park.ParkController.SensorController parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.naru.park.ParkController.SensorController prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.naru.park.SensorController}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.naru.park.SensorController)
        org.naru.park.ParkController.SensorControllerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.naru.park.ParkController.internal_static_org_naru_park_SensorController_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.naru.park.ParkController.internal_static_org_naru_park_SensorController_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.naru.park.ParkController.SensorController.class, org.naru.park.ParkController.SensorController.Builder.class);
      }

      // Construct using org.naru.park.ParkController.SensorController.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (sendReadingBuilder_ == null) {
          sendReading_ = null;
        } else {
          sendReading_ = null;
          sendReadingBuilder_ = null;
        }
        if (allBuilder_ == null) {
          all_ = null;
        } else {
          all_ = null;
          allBuilder_ = null;
        }
        if (saveSensorBuilder_ == null) {
          saveSensor_ = null;
        } else {
          saveSensor_ = null;
          saveSensorBuilder_ = null;
        }
        if (deleteSensorBuilder_ == null) {
          deleteSensor_ = null;
        } else {
          deleteSensor_ = null;
          deleteSensorBuilder_ = null;
        }
        if (getLatestReadingBuilder_ == null) {
          getLatestReading_ = null;
        } else {
          getLatestReading_ = null;
          getLatestReadingBuilder_ = null;
        }
        if (getUserHistoryBuilder_ == null) {
          getUserHistory_ = null;
        } else {
          getUserHistory_ = null;
          getUserHistoryBuilder_ = null;
        }
        if (getLatestSensorReadingForUserBuilder_ == null) {
          getLatestSensorReadingForUser_ = null;
        } else {
          getLatestSensorReadingForUser_ = null;
          getLatestSensorReadingForUserBuilder_ = null;
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.naru.park.ParkController.internal_static_org_naru_park_SensorController_descriptor;
      }

      public org.naru.park.ParkController.SensorController getDefaultInstanceForType() {
        return org.naru.park.ParkController.SensorController.getDefaultInstance();
      }

      public org.naru.park.ParkController.SensorController build() {
        org.naru.park.ParkController.SensorController result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.naru.park.ParkController.SensorController buildPartial() {
        org.naru.park.ParkController.SensorController result = new org.naru.park.ParkController.SensorController(this);
        if (sendReadingBuilder_ == null) {
          result.sendReading_ = sendReading_;
        } else {
          result.sendReading_ = sendReadingBuilder_.build();
        }
        if (allBuilder_ == null) {
          result.all_ = all_;
        } else {
          result.all_ = allBuilder_.build();
        }
        if (saveSensorBuilder_ == null) {
          result.saveSensor_ = saveSensor_;
        } else {
          result.saveSensor_ = saveSensorBuilder_.build();
        }
        if (deleteSensorBuilder_ == null) {
          result.deleteSensor_ = deleteSensor_;
        } else {
          result.deleteSensor_ = deleteSensorBuilder_.build();
        }
        if (getLatestReadingBuilder_ == null) {
          result.getLatestReading_ = getLatestReading_;
        } else {
          result.getLatestReading_ = getLatestReadingBuilder_.build();
        }
        if (getUserHistoryBuilder_ == null) {
          result.getUserHistory_ = getUserHistory_;
        } else {
          result.getUserHistory_ = getUserHistoryBuilder_.build();
        }
        if (getLatestSensorReadingForUserBuilder_ == null) {
          result.getLatestSensorReadingForUser_ = getLatestSensorReadingForUser_;
        } else {
          result.getLatestSensorReadingForUser_ = getLatestSensorReadingForUserBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.naru.park.ParkController.SensorController) {
          return mergeFrom((org.naru.park.ParkController.SensorController)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.naru.park.ParkController.SensorController other) {
        if (other == org.naru.park.ParkController.SensorController.getDefaultInstance()) return this;
        if (other.hasSendReading()) {
          mergeSendReading(other.getSendReading());
        }
        if (other.hasAll()) {
          mergeAll(other.getAll());
        }
        if (other.hasSaveSensor()) {
          mergeSaveSensor(other.getSaveSensor());
        }
        if (other.hasDeleteSensor()) {
          mergeDeleteSensor(other.getDeleteSensor());
        }
        if (other.hasGetLatestReading()) {
          mergeGetLatestReading(other.getGetLatestReading());
        }
        if (other.hasGetUserHistory()) {
          mergeGetUserHistory(other.getGetUserHistory());
        }
        if (other.hasGetLatestSensorReadingForUser()) {
          mergeGetLatestSensorReadingForUser(other.getGetLatestSensorReadingForUser());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.naru.park.ParkController.SensorController parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.naru.park.ParkController.SensorController) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private org.naru.park.ParkController.CommonAction sendReading_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder> sendReadingBuilder_;
      /**
       * <code>.org.naru.park.CommonAction send_reading = 1;</code>
       */
      public boolean hasSendReading() {
        return sendReadingBuilder_ != null || sendReading_ != null;
      }
      /**
       * <code>.org.naru.park.CommonAction send_reading = 1;</code>
       */
      public org.naru.park.ParkController.CommonAction getSendReading() {
        if (sendReadingBuilder_ == null) {
          return sendReading_ == null ? org.naru.park.ParkController.CommonAction.getDefaultInstance() : sendReading_;
        } else {
          return sendReadingBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.naru.park.CommonAction send_reading = 1;</code>
       */
      public Builder setSendReading(org.naru.park.ParkController.CommonAction value) {
        if (sendReadingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sendReading_ = value;
          onChanged();
        } else {
          sendReadingBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction send_reading = 1;</code>
       */
      public Builder setSendReading(
          org.naru.park.ParkController.CommonAction.Builder builderForValue) {
        if (sendReadingBuilder_ == null) {
          sendReading_ = builderForValue.build();
          onChanged();
        } else {
          sendReadingBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction send_reading = 1;</code>
       */
      public Builder mergeSendReading(org.naru.park.ParkController.CommonAction value) {
        if (sendReadingBuilder_ == null) {
          if (sendReading_ != null) {
            sendReading_ =
              org.naru.park.ParkController.CommonAction.newBuilder(sendReading_).mergeFrom(value).buildPartial();
          } else {
            sendReading_ = value;
          }
          onChanged();
        } else {
          sendReadingBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction send_reading = 1;</code>
       */
      public Builder clearSendReading() {
        if (sendReadingBuilder_ == null) {
          sendReading_ = null;
          onChanged();
        } else {
          sendReading_ = null;
          sendReadingBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction send_reading = 1;</code>
       */
      public org.naru.park.ParkController.CommonAction.Builder getSendReadingBuilder() {
        
        onChanged();
        return getSendReadingFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.naru.park.CommonAction send_reading = 1;</code>
       */
      public org.naru.park.ParkController.CommonActionOrBuilder getSendReadingOrBuilder() {
        if (sendReadingBuilder_ != null) {
          return sendReadingBuilder_.getMessageOrBuilder();
        } else {
          return sendReading_ == null ?
              org.naru.park.ParkController.CommonAction.getDefaultInstance() : sendReading_;
        }
      }
      /**
       * <code>.org.naru.park.CommonAction send_reading = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder> 
          getSendReadingFieldBuilder() {
        if (sendReadingBuilder_ == null) {
          sendReadingBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder>(
                  getSendReading(),
                  getParentForChildren(),
                  isClean());
          sendReading_ = null;
        }
        return sendReadingBuilder_;
      }

      private org.naru.park.ParkController.CommonAction all_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder> allBuilder_;
      /**
       * <code>.org.naru.park.CommonAction all = 2;</code>
       */
      public boolean hasAll() {
        return allBuilder_ != null || all_ != null;
      }
      /**
       * <code>.org.naru.park.CommonAction all = 2;</code>
       */
      public org.naru.park.ParkController.CommonAction getAll() {
        if (allBuilder_ == null) {
          return all_ == null ? org.naru.park.ParkController.CommonAction.getDefaultInstance() : all_;
        } else {
          return allBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.naru.park.CommonAction all = 2;</code>
       */
      public Builder setAll(org.naru.park.ParkController.CommonAction value) {
        if (allBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          all_ = value;
          onChanged();
        } else {
          allBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction all = 2;</code>
       */
      public Builder setAll(
          org.naru.park.ParkController.CommonAction.Builder builderForValue) {
        if (allBuilder_ == null) {
          all_ = builderForValue.build();
          onChanged();
        } else {
          allBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction all = 2;</code>
       */
      public Builder mergeAll(org.naru.park.ParkController.CommonAction value) {
        if (allBuilder_ == null) {
          if (all_ != null) {
            all_ =
              org.naru.park.ParkController.CommonAction.newBuilder(all_).mergeFrom(value).buildPartial();
          } else {
            all_ = value;
          }
          onChanged();
        } else {
          allBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction all = 2;</code>
       */
      public Builder clearAll() {
        if (allBuilder_ == null) {
          all_ = null;
          onChanged();
        } else {
          all_ = null;
          allBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction all = 2;</code>
       */
      public org.naru.park.ParkController.CommonAction.Builder getAllBuilder() {
        
        onChanged();
        return getAllFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.naru.park.CommonAction all = 2;</code>
       */
      public org.naru.park.ParkController.CommonActionOrBuilder getAllOrBuilder() {
        if (allBuilder_ != null) {
          return allBuilder_.getMessageOrBuilder();
        } else {
          return all_ == null ?
              org.naru.park.ParkController.CommonAction.getDefaultInstance() : all_;
        }
      }
      /**
       * <code>.org.naru.park.CommonAction all = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder> 
          getAllFieldBuilder() {
        if (allBuilder_ == null) {
          allBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder>(
                  getAll(),
                  getParentForChildren(),
                  isClean());
          all_ = null;
        }
        return allBuilder_;
      }

      private org.naru.park.ParkController.CommonAction saveSensor_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder> saveSensorBuilder_;
      /**
       * <code>.org.naru.park.CommonAction save_sensor = 3;</code>
       */
      public boolean hasSaveSensor() {
        return saveSensorBuilder_ != null || saveSensor_ != null;
      }
      /**
       * <code>.org.naru.park.CommonAction save_sensor = 3;</code>
       */
      public org.naru.park.ParkController.CommonAction getSaveSensor() {
        if (saveSensorBuilder_ == null) {
          return saveSensor_ == null ? org.naru.park.ParkController.CommonAction.getDefaultInstance() : saveSensor_;
        } else {
          return saveSensorBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.naru.park.CommonAction save_sensor = 3;</code>
       */
      public Builder setSaveSensor(org.naru.park.ParkController.CommonAction value) {
        if (saveSensorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          saveSensor_ = value;
          onChanged();
        } else {
          saveSensorBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction save_sensor = 3;</code>
       */
      public Builder setSaveSensor(
          org.naru.park.ParkController.CommonAction.Builder builderForValue) {
        if (saveSensorBuilder_ == null) {
          saveSensor_ = builderForValue.build();
          onChanged();
        } else {
          saveSensorBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction save_sensor = 3;</code>
       */
      public Builder mergeSaveSensor(org.naru.park.ParkController.CommonAction value) {
        if (saveSensorBuilder_ == null) {
          if (saveSensor_ != null) {
            saveSensor_ =
              org.naru.park.ParkController.CommonAction.newBuilder(saveSensor_).mergeFrom(value).buildPartial();
          } else {
            saveSensor_ = value;
          }
          onChanged();
        } else {
          saveSensorBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction save_sensor = 3;</code>
       */
      public Builder clearSaveSensor() {
        if (saveSensorBuilder_ == null) {
          saveSensor_ = null;
          onChanged();
        } else {
          saveSensor_ = null;
          saveSensorBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction save_sensor = 3;</code>
       */
      public org.naru.park.ParkController.CommonAction.Builder getSaveSensorBuilder() {
        
        onChanged();
        return getSaveSensorFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.naru.park.CommonAction save_sensor = 3;</code>
       */
      public org.naru.park.ParkController.CommonActionOrBuilder getSaveSensorOrBuilder() {
        if (saveSensorBuilder_ != null) {
          return saveSensorBuilder_.getMessageOrBuilder();
        } else {
          return saveSensor_ == null ?
              org.naru.park.ParkController.CommonAction.getDefaultInstance() : saveSensor_;
        }
      }
      /**
       * <code>.org.naru.park.CommonAction save_sensor = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder> 
          getSaveSensorFieldBuilder() {
        if (saveSensorBuilder_ == null) {
          saveSensorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder>(
                  getSaveSensor(),
                  getParentForChildren(),
                  isClean());
          saveSensor_ = null;
        }
        return saveSensorBuilder_;
      }

      private org.naru.park.ParkController.CommonAction deleteSensor_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder> deleteSensorBuilder_;
      /**
       * <code>.org.naru.park.CommonAction delete_sensor = 4;</code>
       */
      public boolean hasDeleteSensor() {
        return deleteSensorBuilder_ != null || deleteSensor_ != null;
      }
      /**
       * <code>.org.naru.park.CommonAction delete_sensor = 4;</code>
       */
      public org.naru.park.ParkController.CommonAction getDeleteSensor() {
        if (deleteSensorBuilder_ == null) {
          return deleteSensor_ == null ? org.naru.park.ParkController.CommonAction.getDefaultInstance() : deleteSensor_;
        } else {
          return deleteSensorBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.naru.park.CommonAction delete_sensor = 4;</code>
       */
      public Builder setDeleteSensor(org.naru.park.ParkController.CommonAction value) {
        if (deleteSensorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          deleteSensor_ = value;
          onChanged();
        } else {
          deleteSensorBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction delete_sensor = 4;</code>
       */
      public Builder setDeleteSensor(
          org.naru.park.ParkController.CommonAction.Builder builderForValue) {
        if (deleteSensorBuilder_ == null) {
          deleteSensor_ = builderForValue.build();
          onChanged();
        } else {
          deleteSensorBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction delete_sensor = 4;</code>
       */
      public Builder mergeDeleteSensor(org.naru.park.ParkController.CommonAction value) {
        if (deleteSensorBuilder_ == null) {
          if (deleteSensor_ != null) {
            deleteSensor_ =
              org.naru.park.ParkController.CommonAction.newBuilder(deleteSensor_).mergeFrom(value).buildPartial();
          } else {
            deleteSensor_ = value;
          }
          onChanged();
        } else {
          deleteSensorBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction delete_sensor = 4;</code>
       */
      public Builder clearDeleteSensor() {
        if (deleteSensorBuilder_ == null) {
          deleteSensor_ = null;
          onChanged();
        } else {
          deleteSensor_ = null;
          deleteSensorBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction delete_sensor = 4;</code>
       */
      public org.naru.park.ParkController.CommonAction.Builder getDeleteSensorBuilder() {
        
        onChanged();
        return getDeleteSensorFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.naru.park.CommonAction delete_sensor = 4;</code>
       */
      public org.naru.park.ParkController.CommonActionOrBuilder getDeleteSensorOrBuilder() {
        if (deleteSensorBuilder_ != null) {
          return deleteSensorBuilder_.getMessageOrBuilder();
        } else {
          return deleteSensor_ == null ?
              org.naru.park.ParkController.CommonAction.getDefaultInstance() : deleteSensor_;
        }
      }
      /**
       * <code>.org.naru.park.CommonAction delete_sensor = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder> 
          getDeleteSensorFieldBuilder() {
        if (deleteSensorBuilder_ == null) {
          deleteSensorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder>(
                  getDeleteSensor(),
                  getParentForChildren(),
                  isClean());
          deleteSensor_ = null;
        }
        return deleteSensorBuilder_;
      }

      private org.naru.park.ParkController.CommonAction getLatestReading_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder> getLatestReadingBuilder_;
      /**
       * <code>.org.naru.park.CommonAction get_latest_reading = 5;</code>
       */
      public boolean hasGetLatestReading() {
        return getLatestReadingBuilder_ != null || getLatestReading_ != null;
      }
      /**
       * <code>.org.naru.park.CommonAction get_latest_reading = 5;</code>
       */
      public org.naru.park.ParkController.CommonAction getGetLatestReading() {
        if (getLatestReadingBuilder_ == null) {
          return getLatestReading_ == null ? org.naru.park.ParkController.CommonAction.getDefaultInstance() : getLatestReading_;
        } else {
          return getLatestReadingBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.naru.park.CommonAction get_latest_reading = 5;</code>
       */
      public Builder setGetLatestReading(org.naru.park.ParkController.CommonAction value) {
        if (getLatestReadingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          getLatestReading_ = value;
          onChanged();
        } else {
          getLatestReadingBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction get_latest_reading = 5;</code>
       */
      public Builder setGetLatestReading(
          org.naru.park.ParkController.CommonAction.Builder builderForValue) {
        if (getLatestReadingBuilder_ == null) {
          getLatestReading_ = builderForValue.build();
          onChanged();
        } else {
          getLatestReadingBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction get_latest_reading = 5;</code>
       */
      public Builder mergeGetLatestReading(org.naru.park.ParkController.CommonAction value) {
        if (getLatestReadingBuilder_ == null) {
          if (getLatestReading_ != null) {
            getLatestReading_ =
              org.naru.park.ParkController.CommonAction.newBuilder(getLatestReading_).mergeFrom(value).buildPartial();
          } else {
            getLatestReading_ = value;
          }
          onChanged();
        } else {
          getLatestReadingBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction get_latest_reading = 5;</code>
       */
      public Builder clearGetLatestReading() {
        if (getLatestReadingBuilder_ == null) {
          getLatestReading_ = null;
          onChanged();
        } else {
          getLatestReading_ = null;
          getLatestReadingBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction get_latest_reading = 5;</code>
       */
      public org.naru.park.ParkController.CommonAction.Builder getGetLatestReadingBuilder() {
        
        onChanged();
        return getGetLatestReadingFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.naru.park.CommonAction get_latest_reading = 5;</code>
       */
      public org.naru.park.ParkController.CommonActionOrBuilder getGetLatestReadingOrBuilder() {
        if (getLatestReadingBuilder_ != null) {
          return getLatestReadingBuilder_.getMessageOrBuilder();
        } else {
          return getLatestReading_ == null ?
              org.naru.park.ParkController.CommonAction.getDefaultInstance() : getLatestReading_;
        }
      }
      /**
       * <code>.org.naru.park.CommonAction get_latest_reading = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder> 
          getGetLatestReadingFieldBuilder() {
        if (getLatestReadingBuilder_ == null) {
          getLatestReadingBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder>(
                  getGetLatestReading(),
                  getParentForChildren(),
                  isClean());
          getLatestReading_ = null;
        }
        return getLatestReadingBuilder_;
      }

      private org.naru.park.ParkController.CommonAction getUserHistory_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder> getUserHistoryBuilder_;
      /**
       * <code>.org.naru.park.CommonAction get_user_history = 6;</code>
       */
      public boolean hasGetUserHistory() {
        return getUserHistoryBuilder_ != null || getUserHistory_ != null;
      }
      /**
       * <code>.org.naru.park.CommonAction get_user_history = 6;</code>
       */
      public org.naru.park.ParkController.CommonAction getGetUserHistory() {
        if (getUserHistoryBuilder_ == null) {
          return getUserHistory_ == null ? org.naru.park.ParkController.CommonAction.getDefaultInstance() : getUserHistory_;
        } else {
          return getUserHistoryBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.naru.park.CommonAction get_user_history = 6;</code>
       */
      public Builder setGetUserHistory(org.naru.park.ParkController.CommonAction value) {
        if (getUserHistoryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          getUserHistory_ = value;
          onChanged();
        } else {
          getUserHistoryBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction get_user_history = 6;</code>
       */
      public Builder setGetUserHistory(
          org.naru.park.ParkController.CommonAction.Builder builderForValue) {
        if (getUserHistoryBuilder_ == null) {
          getUserHistory_ = builderForValue.build();
          onChanged();
        } else {
          getUserHistoryBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction get_user_history = 6;</code>
       */
      public Builder mergeGetUserHistory(org.naru.park.ParkController.CommonAction value) {
        if (getUserHistoryBuilder_ == null) {
          if (getUserHistory_ != null) {
            getUserHistory_ =
              org.naru.park.ParkController.CommonAction.newBuilder(getUserHistory_).mergeFrom(value).buildPartial();
          } else {
            getUserHistory_ = value;
          }
          onChanged();
        } else {
          getUserHistoryBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction get_user_history = 6;</code>
       */
      public Builder clearGetUserHistory() {
        if (getUserHistoryBuilder_ == null) {
          getUserHistory_ = null;
          onChanged();
        } else {
          getUserHistory_ = null;
          getUserHistoryBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction get_user_history = 6;</code>
       */
      public org.naru.park.ParkController.CommonAction.Builder getGetUserHistoryBuilder() {
        
        onChanged();
        return getGetUserHistoryFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.naru.park.CommonAction get_user_history = 6;</code>
       */
      public org.naru.park.ParkController.CommonActionOrBuilder getGetUserHistoryOrBuilder() {
        if (getUserHistoryBuilder_ != null) {
          return getUserHistoryBuilder_.getMessageOrBuilder();
        } else {
          return getUserHistory_ == null ?
              org.naru.park.ParkController.CommonAction.getDefaultInstance() : getUserHistory_;
        }
      }
      /**
       * <code>.org.naru.park.CommonAction get_user_history = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder> 
          getGetUserHistoryFieldBuilder() {
        if (getUserHistoryBuilder_ == null) {
          getUserHistoryBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder>(
                  getGetUserHistory(),
                  getParentForChildren(),
                  isClean());
          getUserHistory_ = null;
        }
        return getUserHistoryBuilder_;
      }

      private org.naru.park.ParkController.CommonAction getLatestSensorReadingForUser_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder> getLatestSensorReadingForUserBuilder_;
      /**
       * <code>.org.naru.park.CommonAction get_latest_sensor_reading_for_user = 7;</code>
       */
      public boolean hasGetLatestSensorReadingForUser() {
        return getLatestSensorReadingForUserBuilder_ != null || getLatestSensorReadingForUser_ != null;
      }
      /**
       * <code>.org.naru.park.CommonAction get_latest_sensor_reading_for_user = 7;</code>
       */
      public org.naru.park.ParkController.CommonAction getGetLatestSensorReadingForUser() {
        if (getLatestSensorReadingForUserBuilder_ == null) {
          return getLatestSensorReadingForUser_ == null ? org.naru.park.ParkController.CommonAction.getDefaultInstance() : getLatestSensorReadingForUser_;
        } else {
          return getLatestSensorReadingForUserBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.naru.park.CommonAction get_latest_sensor_reading_for_user = 7;</code>
       */
      public Builder setGetLatestSensorReadingForUser(org.naru.park.ParkController.CommonAction value) {
        if (getLatestSensorReadingForUserBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          getLatestSensorReadingForUser_ = value;
          onChanged();
        } else {
          getLatestSensorReadingForUserBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction get_latest_sensor_reading_for_user = 7;</code>
       */
      public Builder setGetLatestSensorReadingForUser(
          org.naru.park.ParkController.CommonAction.Builder builderForValue) {
        if (getLatestSensorReadingForUserBuilder_ == null) {
          getLatestSensorReadingForUser_ = builderForValue.build();
          onChanged();
        } else {
          getLatestSensorReadingForUserBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction get_latest_sensor_reading_for_user = 7;</code>
       */
      public Builder mergeGetLatestSensorReadingForUser(org.naru.park.ParkController.CommonAction value) {
        if (getLatestSensorReadingForUserBuilder_ == null) {
          if (getLatestSensorReadingForUser_ != null) {
            getLatestSensorReadingForUser_ =
              org.naru.park.ParkController.CommonAction.newBuilder(getLatestSensorReadingForUser_).mergeFrom(value).buildPartial();
          } else {
            getLatestSensorReadingForUser_ = value;
          }
          onChanged();
        } else {
          getLatestSensorReadingForUserBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction get_latest_sensor_reading_for_user = 7;</code>
       */
      public Builder clearGetLatestSensorReadingForUser() {
        if (getLatestSensorReadingForUserBuilder_ == null) {
          getLatestSensorReadingForUser_ = null;
          onChanged();
        } else {
          getLatestSensorReadingForUser_ = null;
          getLatestSensorReadingForUserBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction get_latest_sensor_reading_for_user = 7;</code>
       */
      public org.naru.park.ParkController.CommonAction.Builder getGetLatestSensorReadingForUserBuilder() {
        
        onChanged();
        return getGetLatestSensorReadingForUserFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.naru.park.CommonAction get_latest_sensor_reading_for_user = 7;</code>
       */
      public org.naru.park.ParkController.CommonActionOrBuilder getGetLatestSensorReadingForUserOrBuilder() {
        if (getLatestSensorReadingForUserBuilder_ != null) {
          return getLatestSensorReadingForUserBuilder_.getMessageOrBuilder();
        } else {
          return getLatestSensorReadingForUser_ == null ?
              org.naru.park.ParkController.CommonAction.getDefaultInstance() : getLatestSensorReadingForUser_;
        }
      }
      /**
       * <code>.org.naru.park.CommonAction get_latest_sensor_reading_for_user = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder> 
          getGetLatestSensorReadingForUserFieldBuilder() {
        if (getLatestSensorReadingForUserBuilder_ == null) {
          getLatestSensorReadingForUserBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder>(
                  getGetLatestSensorReadingForUser(),
                  getParentForChildren(),
                  isClean());
          getLatestSensorReadingForUser_ = null;
        }
        return getLatestSensorReadingForUserBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:org.naru.park.SensorController)
    }

    // @@protoc_insertion_point(class_scope:org.naru.park.SensorController)
    private static final org.naru.park.ParkController.SensorController DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.naru.park.ParkController.SensorController();
    }

    public static org.naru.park.ParkController.SensorController getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SensorController>
        PARSER = new com.google.protobuf.AbstractParser<SensorController>() {
      public SensorController parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new SensorController(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SensorController> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SensorController> getParserForType() {
      return PARSER;
    }

    public org.naru.park.ParkController.SensorController getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BeaconControllerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.naru.park.BeaconController)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.org.naru.park.CommonAction all = 1;</code>
     */
    boolean hasAll();
    /**
     * <code>.org.naru.park.CommonAction all = 1;</code>
     */
    org.naru.park.ParkController.CommonAction getAll();
    /**
     * <code>.org.naru.park.CommonAction all = 1;</code>
     */
    org.naru.park.ParkController.CommonActionOrBuilder getAllOrBuilder();

    /**
     * <code>.org.naru.park.CommonAction save_beacon = 2;</code>
     */
    boolean hasSaveBeacon();
    /**
     * <code>.org.naru.park.CommonAction save_beacon = 2;</code>
     */
    org.naru.park.ParkController.CommonAction getSaveBeacon();
    /**
     * <code>.org.naru.park.CommonAction save_beacon = 2;</code>
     */
    org.naru.park.ParkController.CommonActionOrBuilder getSaveBeaconOrBuilder();

    /**
     * <code>.org.naru.park.CommonAction delete_beacon = 3;</code>
     */
    boolean hasDeleteBeacon();
    /**
     * <code>.org.naru.park.CommonAction delete_beacon = 3;</code>
     */
    org.naru.park.ParkController.CommonAction getDeleteBeacon();
    /**
     * <code>.org.naru.park.CommonAction delete_beacon = 3;</code>
     */
    org.naru.park.ParkController.CommonActionOrBuilder getDeleteBeaconOrBuilder();
  }
  /**
   * Protobuf type {@code org.naru.park.BeaconController}
   */
  public  static final class BeaconController extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.naru.park.BeaconController)
      BeaconControllerOrBuilder {
    // Use BeaconController.newBuilder() to construct.
    private BeaconController(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BeaconController() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private BeaconController(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.naru.park.ParkController.CommonAction.Builder subBuilder = null;
              if (all_ != null) {
                subBuilder = all_.toBuilder();
              }
              all_ = input.readMessage(org.naru.park.ParkController.CommonAction.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(all_);
                all_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              org.naru.park.ParkController.CommonAction.Builder subBuilder = null;
              if (saveBeacon_ != null) {
                subBuilder = saveBeacon_.toBuilder();
              }
              saveBeacon_ = input.readMessage(org.naru.park.ParkController.CommonAction.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(saveBeacon_);
                saveBeacon_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              org.naru.park.ParkController.CommonAction.Builder subBuilder = null;
              if (deleteBeacon_ != null) {
                subBuilder = deleteBeacon_.toBuilder();
              }
              deleteBeacon_ = input.readMessage(org.naru.park.ParkController.CommonAction.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(deleteBeacon_);
                deleteBeacon_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.naru.park.ParkController.internal_static_org_naru_park_BeaconController_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.naru.park.ParkController.internal_static_org_naru_park_BeaconController_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.naru.park.ParkController.BeaconController.class, org.naru.park.ParkController.BeaconController.Builder.class);
    }

    public static final int ALL_FIELD_NUMBER = 1;
    private org.naru.park.ParkController.CommonAction all_;
    /**
     * <code>.org.naru.park.CommonAction all = 1;</code>
     */
    public boolean hasAll() {
      return all_ != null;
    }
    /**
     * <code>.org.naru.park.CommonAction all = 1;</code>
     */
    public org.naru.park.ParkController.CommonAction getAll() {
      return all_ == null ? org.naru.park.ParkController.CommonAction.getDefaultInstance() : all_;
    }
    /**
     * <code>.org.naru.park.CommonAction all = 1;</code>
     */
    public org.naru.park.ParkController.CommonActionOrBuilder getAllOrBuilder() {
      return getAll();
    }

    public static final int SAVE_BEACON_FIELD_NUMBER = 2;
    private org.naru.park.ParkController.CommonAction saveBeacon_;
    /**
     * <code>.org.naru.park.CommonAction save_beacon = 2;</code>
     */
    public boolean hasSaveBeacon() {
      return saveBeacon_ != null;
    }
    /**
     * <code>.org.naru.park.CommonAction save_beacon = 2;</code>
     */
    public org.naru.park.ParkController.CommonAction getSaveBeacon() {
      return saveBeacon_ == null ? org.naru.park.ParkController.CommonAction.getDefaultInstance() : saveBeacon_;
    }
    /**
     * <code>.org.naru.park.CommonAction save_beacon = 2;</code>
     */
    public org.naru.park.ParkController.CommonActionOrBuilder getSaveBeaconOrBuilder() {
      return getSaveBeacon();
    }

    public static final int DELETE_BEACON_FIELD_NUMBER = 3;
    private org.naru.park.ParkController.CommonAction deleteBeacon_;
    /**
     * <code>.org.naru.park.CommonAction delete_beacon = 3;</code>
     */
    public boolean hasDeleteBeacon() {
      return deleteBeacon_ != null;
    }
    /**
     * <code>.org.naru.park.CommonAction delete_beacon = 3;</code>
     */
    public org.naru.park.ParkController.CommonAction getDeleteBeacon() {
      return deleteBeacon_ == null ? org.naru.park.ParkController.CommonAction.getDefaultInstance() : deleteBeacon_;
    }
    /**
     * <code>.org.naru.park.CommonAction delete_beacon = 3;</code>
     */
    public org.naru.park.ParkController.CommonActionOrBuilder getDeleteBeaconOrBuilder() {
      return getDeleteBeacon();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (all_ != null) {
        output.writeMessage(1, getAll());
      }
      if (saveBeacon_ != null) {
        output.writeMessage(2, getSaveBeacon());
      }
      if (deleteBeacon_ != null) {
        output.writeMessage(3, getDeleteBeacon());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (all_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getAll());
      }
      if (saveBeacon_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getSaveBeacon());
      }
      if (deleteBeacon_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getDeleteBeacon());
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.naru.park.ParkController.BeaconController)) {
        return super.equals(obj);
      }
      org.naru.park.ParkController.BeaconController other = (org.naru.park.ParkController.BeaconController) obj;

      boolean result = true;
      result = result && (hasAll() == other.hasAll());
      if (hasAll()) {
        result = result && getAll()
            .equals(other.getAll());
      }
      result = result && (hasSaveBeacon() == other.hasSaveBeacon());
      if (hasSaveBeacon()) {
        result = result && getSaveBeacon()
            .equals(other.getSaveBeacon());
      }
      result = result && (hasDeleteBeacon() == other.hasDeleteBeacon());
      if (hasDeleteBeacon()) {
        result = result && getDeleteBeacon()
            .equals(other.getDeleteBeacon());
      }
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasAll()) {
        hash = (37 * hash) + ALL_FIELD_NUMBER;
        hash = (53 * hash) + getAll().hashCode();
      }
      if (hasSaveBeacon()) {
        hash = (37 * hash) + SAVE_BEACON_FIELD_NUMBER;
        hash = (53 * hash) + getSaveBeacon().hashCode();
      }
      if (hasDeleteBeacon()) {
        hash = (37 * hash) + DELETE_BEACON_FIELD_NUMBER;
        hash = (53 * hash) + getDeleteBeacon().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.naru.park.ParkController.BeaconController parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.naru.park.ParkController.BeaconController parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.naru.park.ParkController.BeaconController parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.naru.park.ParkController.BeaconController parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.naru.park.ParkController.BeaconController parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.naru.park.ParkController.BeaconController parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.naru.park.ParkController.BeaconController parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.naru.park.ParkController.BeaconController parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.naru.park.ParkController.BeaconController parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.naru.park.ParkController.BeaconController parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.naru.park.ParkController.BeaconController prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.naru.park.BeaconController}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.naru.park.BeaconController)
        org.naru.park.ParkController.BeaconControllerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.naru.park.ParkController.internal_static_org_naru_park_BeaconController_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.naru.park.ParkController.internal_static_org_naru_park_BeaconController_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.naru.park.ParkController.BeaconController.class, org.naru.park.ParkController.BeaconController.Builder.class);
      }

      // Construct using org.naru.park.ParkController.BeaconController.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (allBuilder_ == null) {
          all_ = null;
        } else {
          all_ = null;
          allBuilder_ = null;
        }
        if (saveBeaconBuilder_ == null) {
          saveBeacon_ = null;
        } else {
          saveBeacon_ = null;
          saveBeaconBuilder_ = null;
        }
        if (deleteBeaconBuilder_ == null) {
          deleteBeacon_ = null;
        } else {
          deleteBeacon_ = null;
          deleteBeaconBuilder_ = null;
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.naru.park.ParkController.internal_static_org_naru_park_BeaconController_descriptor;
      }

      public org.naru.park.ParkController.BeaconController getDefaultInstanceForType() {
        return org.naru.park.ParkController.BeaconController.getDefaultInstance();
      }

      public org.naru.park.ParkController.BeaconController build() {
        org.naru.park.ParkController.BeaconController result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.naru.park.ParkController.BeaconController buildPartial() {
        org.naru.park.ParkController.BeaconController result = new org.naru.park.ParkController.BeaconController(this);
        if (allBuilder_ == null) {
          result.all_ = all_;
        } else {
          result.all_ = allBuilder_.build();
        }
        if (saveBeaconBuilder_ == null) {
          result.saveBeacon_ = saveBeacon_;
        } else {
          result.saveBeacon_ = saveBeaconBuilder_.build();
        }
        if (deleteBeaconBuilder_ == null) {
          result.deleteBeacon_ = deleteBeacon_;
        } else {
          result.deleteBeacon_ = deleteBeaconBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.naru.park.ParkController.BeaconController) {
          return mergeFrom((org.naru.park.ParkController.BeaconController)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.naru.park.ParkController.BeaconController other) {
        if (other == org.naru.park.ParkController.BeaconController.getDefaultInstance()) return this;
        if (other.hasAll()) {
          mergeAll(other.getAll());
        }
        if (other.hasSaveBeacon()) {
          mergeSaveBeacon(other.getSaveBeacon());
        }
        if (other.hasDeleteBeacon()) {
          mergeDeleteBeacon(other.getDeleteBeacon());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.naru.park.ParkController.BeaconController parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.naru.park.ParkController.BeaconController) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private org.naru.park.ParkController.CommonAction all_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder> allBuilder_;
      /**
       * <code>.org.naru.park.CommonAction all = 1;</code>
       */
      public boolean hasAll() {
        return allBuilder_ != null || all_ != null;
      }
      /**
       * <code>.org.naru.park.CommonAction all = 1;</code>
       */
      public org.naru.park.ParkController.CommonAction getAll() {
        if (allBuilder_ == null) {
          return all_ == null ? org.naru.park.ParkController.CommonAction.getDefaultInstance() : all_;
        } else {
          return allBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.naru.park.CommonAction all = 1;</code>
       */
      public Builder setAll(org.naru.park.ParkController.CommonAction value) {
        if (allBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          all_ = value;
          onChanged();
        } else {
          allBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction all = 1;</code>
       */
      public Builder setAll(
          org.naru.park.ParkController.CommonAction.Builder builderForValue) {
        if (allBuilder_ == null) {
          all_ = builderForValue.build();
          onChanged();
        } else {
          allBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction all = 1;</code>
       */
      public Builder mergeAll(org.naru.park.ParkController.CommonAction value) {
        if (allBuilder_ == null) {
          if (all_ != null) {
            all_ =
              org.naru.park.ParkController.CommonAction.newBuilder(all_).mergeFrom(value).buildPartial();
          } else {
            all_ = value;
          }
          onChanged();
        } else {
          allBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction all = 1;</code>
       */
      public Builder clearAll() {
        if (allBuilder_ == null) {
          all_ = null;
          onChanged();
        } else {
          all_ = null;
          allBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction all = 1;</code>
       */
      public org.naru.park.ParkController.CommonAction.Builder getAllBuilder() {
        
        onChanged();
        return getAllFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.naru.park.CommonAction all = 1;</code>
       */
      public org.naru.park.ParkController.CommonActionOrBuilder getAllOrBuilder() {
        if (allBuilder_ != null) {
          return allBuilder_.getMessageOrBuilder();
        } else {
          return all_ == null ?
              org.naru.park.ParkController.CommonAction.getDefaultInstance() : all_;
        }
      }
      /**
       * <code>.org.naru.park.CommonAction all = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder> 
          getAllFieldBuilder() {
        if (allBuilder_ == null) {
          allBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder>(
                  getAll(),
                  getParentForChildren(),
                  isClean());
          all_ = null;
        }
        return allBuilder_;
      }

      private org.naru.park.ParkController.CommonAction saveBeacon_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder> saveBeaconBuilder_;
      /**
       * <code>.org.naru.park.CommonAction save_beacon = 2;</code>
       */
      public boolean hasSaveBeacon() {
        return saveBeaconBuilder_ != null || saveBeacon_ != null;
      }
      /**
       * <code>.org.naru.park.CommonAction save_beacon = 2;</code>
       */
      public org.naru.park.ParkController.CommonAction getSaveBeacon() {
        if (saveBeaconBuilder_ == null) {
          return saveBeacon_ == null ? org.naru.park.ParkController.CommonAction.getDefaultInstance() : saveBeacon_;
        } else {
          return saveBeaconBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.naru.park.CommonAction save_beacon = 2;</code>
       */
      public Builder setSaveBeacon(org.naru.park.ParkController.CommonAction value) {
        if (saveBeaconBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          saveBeacon_ = value;
          onChanged();
        } else {
          saveBeaconBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction save_beacon = 2;</code>
       */
      public Builder setSaveBeacon(
          org.naru.park.ParkController.CommonAction.Builder builderForValue) {
        if (saveBeaconBuilder_ == null) {
          saveBeacon_ = builderForValue.build();
          onChanged();
        } else {
          saveBeaconBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction save_beacon = 2;</code>
       */
      public Builder mergeSaveBeacon(org.naru.park.ParkController.CommonAction value) {
        if (saveBeaconBuilder_ == null) {
          if (saveBeacon_ != null) {
            saveBeacon_ =
              org.naru.park.ParkController.CommonAction.newBuilder(saveBeacon_).mergeFrom(value).buildPartial();
          } else {
            saveBeacon_ = value;
          }
          onChanged();
        } else {
          saveBeaconBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction save_beacon = 2;</code>
       */
      public Builder clearSaveBeacon() {
        if (saveBeaconBuilder_ == null) {
          saveBeacon_ = null;
          onChanged();
        } else {
          saveBeacon_ = null;
          saveBeaconBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction save_beacon = 2;</code>
       */
      public org.naru.park.ParkController.CommonAction.Builder getSaveBeaconBuilder() {
        
        onChanged();
        return getSaveBeaconFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.naru.park.CommonAction save_beacon = 2;</code>
       */
      public org.naru.park.ParkController.CommonActionOrBuilder getSaveBeaconOrBuilder() {
        if (saveBeaconBuilder_ != null) {
          return saveBeaconBuilder_.getMessageOrBuilder();
        } else {
          return saveBeacon_ == null ?
              org.naru.park.ParkController.CommonAction.getDefaultInstance() : saveBeacon_;
        }
      }
      /**
       * <code>.org.naru.park.CommonAction save_beacon = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder> 
          getSaveBeaconFieldBuilder() {
        if (saveBeaconBuilder_ == null) {
          saveBeaconBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder>(
                  getSaveBeacon(),
                  getParentForChildren(),
                  isClean());
          saveBeacon_ = null;
        }
        return saveBeaconBuilder_;
      }

      private org.naru.park.ParkController.CommonAction deleteBeacon_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder> deleteBeaconBuilder_;
      /**
       * <code>.org.naru.park.CommonAction delete_beacon = 3;</code>
       */
      public boolean hasDeleteBeacon() {
        return deleteBeaconBuilder_ != null || deleteBeacon_ != null;
      }
      /**
       * <code>.org.naru.park.CommonAction delete_beacon = 3;</code>
       */
      public org.naru.park.ParkController.CommonAction getDeleteBeacon() {
        if (deleteBeaconBuilder_ == null) {
          return deleteBeacon_ == null ? org.naru.park.ParkController.CommonAction.getDefaultInstance() : deleteBeacon_;
        } else {
          return deleteBeaconBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.naru.park.CommonAction delete_beacon = 3;</code>
       */
      public Builder setDeleteBeacon(org.naru.park.ParkController.CommonAction value) {
        if (deleteBeaconBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          deleteBeacon_ = value;
          onChanged();
        } else {
          deleteBeaconBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction delete_beacon = 3;</code>
       */
      public Builder setDeleteBeacon(
          org.naru.park.ParkController.CommonAction.Builder builderForValue) {
        if (deleteBeaconBuilder_ == null) {
          deleteBeacon_ = builderForValue.build();
          onChanged();
        } else {
          deleteBeaconBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction delete_beacon = 3;</code>
       */
      public Builder mergeDeleteBeacon(org.naru.park.ParkController.CommonAction value) {
        if (deleteBeaconBuilder_ == null) {
          if (deleteBeacon_ != null) {
            deleteBeacon_ =
              org.naru.park.ParkController.CommonAction.newBuilder(deleteBeacon_).mergeFrom(value).buildPartial();
          } else {
            deleteBeacon_ = value;
          }
          onChanged();
        } else {
          deleteBeaconBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction delete_beacon = 3;</code>
       */
      public Builder clearDeleteBeacon() {
        if (deleteBeaconBuilder_ == null) {
          deleteBeacon_ = null;
          onChanged();
        } else {
          deleteBeacon_ = null;
          deleteBeaconBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.naru.park.CommonAction delete_beacon = 3;</code>
       */
      public org.naru.park.ParkController.CommonAction.Builder getDeleteBeaconBuilder() {
        
        onChanged();
        return getDeleteBeaconFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.naru.park.CommonAction delete_beacon = 3;</code>
       */
      public org.naru.park.ParkController.CommonActionOrBuilder getDeleteBeaconOrBuilder() {
        if (deleteBeaconBuilder_ != null) {
          return deleteBeaconBuilder_.getMessageOrBuilder();
        } else {
          return deleteBeacon_ == null ?
              org.naru.park.ParkController.CommonAction.getDefaultInstance() : deleteBeacon_;
        }
      }
      /**
       * <code>.org.naru.park.CommonAction delete_beacon = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder> 
          getDeleteBeaconFieldBuilder() {
        if (deleteBeaconBuilder_ == null) {
          deleteBeaconBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.naru.park.ParkController.CommonAction, org.naru.park.ParkController.CommonAction.Builder, org.naru.park.ParkController.CommonActionOrBuilder>(
                  getDeleteBeacon(),
                  getParentForChildren(),
                  isClean());
          deleteBeacon_ = null;
        }
        return deleteBeaconBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:org.naru.park.BeaconController)
    }

    // @@protoc_insertion_point(class_scope:org.naru.park.BeaconController)
    private static final org.naru.park.ParkController.BeaconController DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.naru.park.ParkController.BeaconController();
    }

    public static org.naru.park.ParkController.BeaconController getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BeaconController>
        PARSER = new com.google.protobuf.AbstractParser<BeaconController>() {
      public BeaconController parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new BeaconController(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<BeaconController> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BeaconController> getParserForType() {
      return PARSER;
    }

    public org.naru.park.ParkController.BeaconController getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_naru_park_CommonAction_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_naru_park_CommonAction_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_naru_park_SensorController_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_naru_park_SensorController_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_naru_park_BeaconController_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_naru_park_BeaconController_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\025park_controller.proto\022\rorg.naru.park\032\020" +
      "park_model.proto\"n\n\014CommonAction\022-\n\007requ" +
      "est\030\001 \001(\0132\034.org.naru.park.UIParkRequest\022" +
      "/\n\010response\030\002 \001(\0132\035.org.naru.park.UIPark" +
      "Response\"\216\003\n\020SensorController\0221\n\014send_re" +
      "ading\030\001 \001(\0132\033.org.naru.park.CommonAction" +
      "\022(\n\003all\030\002 \001(\0132\033.org.naru.park.CommonActi" +
      "on\0220\n\013save_sensor\030\003 \001(\0132\033.org.naru.park." +
      "CommonAction\0222\n\rdelete_sensor\030\004 \001(\0132\033.or" +
      "g.naru.park.CommonAction\0227\n\022get_latest_r",
      "eading\030\005 \001(\0132\033.org.naru.park.CommonActio" +
      "n\0225\n\020get_user_history\030\006 \001(\0132\033.org.naru.p" +
      "ark.CommonAction\022G\n\"get_latest_sensor_re" +
      "ading_for_user\030\007 \001(\0132\033.org.naru.park.Com" +
      "monAction\"\242\001\n\020BeaconController\022(\n\003all\030\001 " +
      "\001(\0132\033.org.naru.park.CommonAction\0220\n\013save" +
      "_beacon\030\002 \001(\0132\033.org.naru.park.CommonActi" +
      "on\0222\n\rdelete_beacon\030\003 \001(\0132\033.org.naru.par" +
      "k.CommonActionb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          org.naru.park.ParkModel.getDescriptor(),
        }, assigner);
    internal_static_org_naru_park_CommonAction_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_naru_park_CommonAction_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_naru_park_CommonAction_descriptor,
        new java.lang.String[] { "Request", "Response", });
    internal_static_org_naru_park_SensorController_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_org_naru_park_SensorController_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_naru_park_SensorController_descriptor,
        new java.lang.String[] { "SendReading", "All", "SaveSensor", "DeleteSensor", "GetLatestReading", "GetUserHistory", "GetLatestSensorReadingForUser", });
    internal_static_org_naru_park_BeaconController_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_org_naru_park_BeaconController_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_naru_park_BeaconController_descriptor,
        new java.lang.String[] { "All", "SaveBeacon", "DeleteBeacon", });
    org.naru.park.ParkModel.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
